import socketserver,os

class FTPServer(socketserver.BaseRequestHandler):
    '''
    定义一个FTPServer
    '''
    def handle(self):
        while True:
            print('New connection:',self.client_address)
            #self.request.send(str(self.client_address).encode())
            transfer = self.request.recv(8192).strip()
            transfer = str(transfer,'utf8')
            if not transfer:break
            #如果接受数据为空,继续输入
            transfer = transfer.split('|')
            #将受到的信息进行切割,'|'
            if hasattr(self,transfer[0]):
                #判断输入的命令是否包含在transfer()
                #print(transfer[1])
                #如果包含则执行反射的函数
                func = getattr(self,transfer[0])
                func(transfer)
            else:
                print('Input error...')
    def transfer(self,cmd):
        print('---filetransfer---',cmd)
        #print(len(cmd))
        if len(cmd) == 3:
            #如果接受到的数据长度为3,则说明包含'transfer|cmd|file'
            if cmd[1] == 'get':
                #如果cmd为get,就下载cmd[2]取到的文件名
                print('client wants to download file:',cmd[2])
                if os.path.isfile(cmd[2]):
                    #判断该文件是否存在,存在则计算文件大小
                    f_size = os.path.getsize(cmd[2])
                    res = 'ready|%s' % f_size
                else:
                    #如果不存在则提示
                    res = 'file does not exist'
                send_info = 'transfer|get|%s' %res
                print(send_info)
                self.request.send(bytes(send_info,'utf8'))
                #发送文件大小等信息
                feedback = str(self.request.recv(8192).decode())
                #接受客户端返回的信息,如果为'transfer|get|recv_ready',则说明一切正常,准备传输
                print(feedback)
                if feedback == 'transfer|get|recv_ready':
                    print('will be begin')
                    f = open(cmd[2],'rb')
                    #rb的方式读取该文件
                    send_size = 0
                    #传输大小初始为0
                    while not f_size == send_size :
                        #如果文件大小不等于传输大小,那么机继续执行传输
                        if f_size - send_size  >8192:
                            #如果剩余文件大小大于8192,那么就f.read,且增加send_size
                            data = f.read(8192)
                            send_size += 8192
                        else:
                            #否则说明文件传输完成
                            data = f.read(f_size - send_size)
                            send_size += (f_size - send_size)
                        self.request.send(data)
                        #传输文件
                        print('文件大小:%s,当前已传输:%s'%(f_size,send_size))
                    else:
                        print('---send file:%s done---'%cmd[2])
                        f.close()
                else:
                    print('not ok')
            elif cmd[1] == 'put':
                #如果判断命令为put
                print('client wants to upload this file:',cmd[2])
                if os.path.isfile(cmd[2]):
                    #判断文件是否存在,文件大小
                    f_size = os.path.getsize(cmd[2])
                    res = 'ready|%s' % f_size
                else:
                    res = 'file does not exist'
                send_info = 'transfer|put|%s' %res
                print(send_info)
                self.request.send(bytes(send_info,'utf8'))
                #返回文件信息给客户端
                feedback = str(self.request.recv(8192).decode())
                #客户端接收到信息后再次回复,判断是否正常,如果正常则开始传输
                if feedback == 'transfer|put|recv_ready':
                    print('will be begin')
                    f = open(cmd[2],'rb')
                    send_size = 0
                    while not f_size == send_size :
                        if f_size - send_size  >8192:
                            data = f.read(8192)
                            send_size += 8192
                        else:
                            data = f.read(f_size - send_size)
                            send_size += (f_size - send_size)
                        self.request.send(data)
                        print(f_size,send_size)
                    else:
                        print('---send file:%s done---'%cmd[2])
                        f.close()

            else:
                print('anything else!')
        else:
            print('input anything else!')

if __name__ == '__main__':
    #服务器地址和端口
    host,port = '127.0.0.1',8082
    server = socketserver.ThreadingTCPServer((host,port),FTPServer)
    server.serve_forever()
