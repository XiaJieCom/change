# This is the Twisted Get Poetry Now! client, version 3.0.

# NOTE: This should not be used as the basis for production code.

import optparse

from twisted.internet.protocol import Protocol, ClientFactory


def parse_args():
    usage = """usage: %prog [options] [hostname]:port ...

This is the Get Poetry Now! client, Twisted version 3.0
Run it like this:

  python get-poetry-1.py port1 port2 port3 ...
"""

    parser = optparse.OptionParser(usage)
    #创建optparse实例
    _, addresses = parser.parse_args()

    if not addresses:
        #如果地址信息不存在,那么就退出
        print(parser.format_help())
        parser.exit()

    def parse_address(addr):
        #如果地址信息不包含':',那么默认就host=127.0.0.1,port=addr
        if ':' not in addr:
            host = '127.0.0.1'
            port = addr
        else:
            #否则就用':'分割
            host, port = addr.split(':', 1)

        if not port.isdigit():
            #如果端口不是数字,提示报错信息
            parser.error('Ports must be integers.')

        return host, int(port)
        #返回地址信息和端口

    return map(parse_address, addresses)


class PoetryProtocol(Protocol):

    poem = ''

    def dataReceived(self, data):
        self.poem += data

    def connectionLost(self, reason):
        self.poemReceived(self.poem)

    def poemReceived(self, poem):
        self.factory.poem_finished(poem)


class PoetryClientFactory(ClientFactory):

    protocol = PoetryProtocol

    def __init__(self, callback):
        self.callback = callback

    def poem_finished(self, poem):
        self.callback(poem)


def get_poetry(host, port, callback):
    """
    Download a poem from the given host and port and invoke

      callback(poem)

    when the poem is complete.
    """
    from twisted.internet import reactor
    factory = PoetryClientFactory(callback)
    reactor.connectTCP(host, port, factory)


def poetry_main():
    addresses = parse_args()
    #处理地址和端口信息
    from twisted.internet import reactor

    poems = []

    def got_poem(poem):
        poems.append(poem)
        #将获取到的poem加入到poems列表
        if len(poems) == len(addresses):
            #如果poems的长度等于addresses,说明传输完,结束传输
            reactor.stop()

    for address in addresses:
        #循环地址信息,使用get_poetry函数处理
        host, port = address
        get_poetry(host, port, got_poem)

    reactor.run()

    for poem in poems:
        #循环打印poem
        print(poem)


if __name__ == '__main__':
    poetry_main()
    #开始执行poetry_main()